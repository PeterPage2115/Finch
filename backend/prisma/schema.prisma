// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// MODEL: User
// ============================================
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // bcrypt hash
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  transactions Transaction[]
  categories   Category[]
  budgets      Budget[]

  @@map("users")
}

// ============================================
// MODEL: Category
// ============================================
model Category {
  id        String       @id @default(uuid())
  name      String
  type      CategoryType @default(EXPENSE)
  color     String       // hex color for UI (e.g., "#ef4444")
  icon      String       // lucide-react icon name (e.g., "UtensilsCrossed")
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@unique([userId, name, type]) // User can't have duplicate category names per type
  @@map("categories")
}

enum CategoryType {
  INCOME
  EXPENSE
}

// ============================================
// MODEL: Transaction
// ============================================
model Transaction {
  id          String          @id @default(uuid())
  amount      Decimal         @db.Decimal(12, 2) // Precyzja do 12 cyfr, 2 po przecinku
  description String?
  date        DateTime        @default(now())
  type        TransactionType
  userId      String
  categoryId  String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@index([userId, date(sort: Desc)]) // Szybkie zapytania po userId i dacie
  @@index([categoryId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

// ============================================
// MODEL: Budget
// ============================================
model Budget {
  id         String       @id @default(uuid())
  amount     Decimal      @db.Decimal(12, 2)
  period     BudgetPeriod @default(MONTHLY)
  startDate  DateTime
  endDate    DateTime
  userId     String
  categoryId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@unique([userId, categoryId, startDate]) // Jeden bud≈ºet per kategoria per okres
  @@index([userId, startDate])
  @@map("budgets")
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}
