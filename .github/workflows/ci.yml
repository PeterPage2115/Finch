name: CI - Tests and Linting

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: finch
          POSTGRES_PASSWORD: finch_test_password
          POSTGRES_DB: finch_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🏗️ Build TypeScript
        run: npm run build

      - name: 🗃️ Run Prisma migrations
        env:
          DATABASE_URL: postgresql://finch:finch_test_password@localhost:5432/finch_test
        run: npx prisma migrate deploy

      - name: 🧪 Run tests
        env:
          DATABASE_URL: postgresql://finch:finch_test_password@localhost:5432/finch_test
          JWT_SECRET: test_jwt_secret_for_ci
          JWT_EXPIRES_IN: 1d
        run: npm test -- --coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint code
        run: npm run lint

      - name: 🏗️ Build Next.js
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
        run: npm run build

      - name: 🧪 Run tests
        run: npm test -- --coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  docker-build:
    name: Docker Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: finch-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🏗️ Build Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: finch-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: 🔒 Audit Backend Dependencies
        working-directory: ./backend
        run: npm audit --production --audit-level=high
        continue-on-error: true

      - name: 🔒 Audit Frontend Dependencies
        working-directory: ./frontend
        run: npm audit --production --audit-level=high
        continue-on-error: true
