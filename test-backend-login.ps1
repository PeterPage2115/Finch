# Test API Logowania - Backend

Write-Host "üîç Test Backend API" -ForegroundColor Cyan
Write-Host "===================" -ForegroundColor Cyan
Write-Host ""

# Test 1: Healthcheck
Write-Host "1Ô∏è‚É£ Test healthcheck..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001" -UseBasicParsing
    Write-Host "‚úÖ Backend odpowiada: $($response.StatusCode)" -ForegroundColor Green
    Write-Host "   Content: $($response.Content)" -ForegroundColor Gray
} catch {
    Write-Host "‚ùå Backend nie odpowiada!" -ForegroundColor Red
    exit 1
}
Write-Host ""

# Test 2: Login z niepoprawnym has≈Çem
Write-Host "2Ô∏è‚É£ Test login (niepoprawne has≈Ço)..." -ForegroundColor Yellow
$body = @{
    email = "piotr.paz04@gmail.com"
    password = "wrongpassword"
} | ConvertTo-Json

try {
    $response = Invoke-RestMethod -Uri "http://localhost:3001/auth/login" `
        -Method POST `
        -ContentType "application/json" `
        -Body $body `
        -ErrorAction Stop
    Write-Host "‚ö†Ô∏è Nieoczekiwane: logowanie zaakceptowane!" -ForegroundColor Yellow
} catch {
    if ($_.Exception.Response.StatusCode -eq 401) {
        Write-Host "‚úÖ Poprawnie odrzucono (401 Unauthorized)" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Nieoczekiwany b≈ÇƒÖd: $($_.Exception.Message)" -ForegroundColor Red
    }
}
Write-Host ""

# Test 3: Pytanie o has≈Ço i pr√≥ba logowania
Write-Host "3Ô∏è‚É£ Test login (interaktywny)..." -ForegroundColor Yellow
Write-Host "Wprowad≈∫ has≈Ço dla piotr.paz04@gmail.com:" -ForegroundColor Cyan
$securePassword = Read-Host -AsSecureString
$password = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($securePassword))

$body = @{
    email = "piotr.paz04@gmail.com"
    password = $password
} | ConvertTo-Json

Write-Host "üì° Wysy≈Çanie ≈ºƒÖdania..." -ForegroundColor Gray

try {
    $response = Invoke-RestMethod -Uri "http://localhost:3001/auth/login" `
        -Method POST `
        -ContentType "application/json" `
        -Body $body `
        -ErrorAction Stop
    
    Write-Host "‚úÖ SUKCES! Zalogowano pomy≈õlnie" -ForegroundColor Green
    Write-Host ""
    Write-Host "üì¶ Odpowied≈∫ z serwera:" -ForegroundColor Cyan
    Write-Host "   User ID: $($response.user.id)" -ForegroundColor White
    Write-Host "   Email: $($response.user.email)" -ForegroundColor White
    Write-Host "   Name: $($response.user.name)" -ForegroundColor White
    Write-Host "   Token length: $($response.accessToken.Length) znak√≥w" -ForegroundColor White
    Write-Host "   Token preview: $($response.accessToken.Substring(0, 30))..." -ForegroundColor Gray
    
    Write-Host ""
    Write-Host "‚úÖ To has≈Ço DZIA≈ÅA! U≈ºyj go na stronie /login-debug" -ForegroundColor Green
    
} catch {
    Write-Host "‚ùå Logowanie nie powiod≈Ço siƒô" -ForegroundColor Red
    Write-Host "   Status: $($_.Exception.Response.StatusCode)" -ForegroundColor Red
    Write-Host "   B≈ÇƒÖd: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "üèÅ Test zako≈Ñczony" -ForegroundColor Cyan
