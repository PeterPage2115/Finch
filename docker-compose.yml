services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: tracker_kasy_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: tracker_user
      POSTGRES_PASSWORD: tracker_password
      POSTGRES_DB: tracker_kasy
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - tracker_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tracker_user -d tracker_kasy"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tracker_kasy_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: "postgresql://tracker_user:tracker_password@db:5432/tracker_kasy?schema=public"
      JWT_SECRET: "${JWT_SECRET:-change-this-to-a-secure-random-string-in-production}"
      JWT_EXPIRATION: "7d"
      PORT: 3001
      NODE_ENV: production
      FRONTEND_URL: "http://localhost:3000"
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - tracker_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://0.0.0.0:3001/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      # Używamy Dockerfile.dev dla developmentu (hot reload)
      dockerfile: Dockerfile.dev
    container_name: tracker_kasy_frontend
    restart: unless-stopped
    environment:
      # W Dockerze używamy nazwy serwisu "backend" z Docker network
      NEXT_PUBLIC_API_URL: "http://backend:3001"
      NODE_ENV: development
    ports:
      - "3000:3000"
    # Mount source code for hot reload
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - tracker_network
    healthcheck:
      test: ["CMD", "sh", "-c", "ps aux | grep -v grep | grep -q 'next-server' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Volumes
volumes:
  pgdata:
    driver: local
    name: tracker_kasy_pgdata

# Networks
networks:
  tracker_network:
    driver: bridge
    name: tracker_kasy_network
